@page "/settings"
@using OnePushUp.Components.SettingsComponents
@using OnePushUp.Services
@inject UserService UserService
@inject NotificationService NotificationService

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            @if (CurrentUser != null)
            {
                <EditNickname />
            }
            else
            {
                <div class="alert alert-warning">
                    No user profile found. Please create a user profile from the home page first.
                </div>
            }
        </div>
        
        <div class="col-md-6 mb-4">
            <NotificationSettings />
            
            <div class="card mt-3">
                <div class="card-header">
                    <h3>Notification Testing</h3>
                </div>
                <div class="card-body">
                    <p>Send a test notification to verify that notifications are working on your device.</p>
                    <button class="btn btn-primary" @onclick="SendTestNotification" disabled="@_isTestingNotification">
                        @if (_isTestingNotification)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            <span>Testing...</span>
                        }
                        else
                        {
                            <span>Send Test Notification</span>
                        }
                    </button>
                    
                    @if (!string.IsNullOrEmpty(_notificationTestMessage))
                    {
                        <div class="alert @(_notificationTestError ? "alert-danger" : "alert-success") mt-3">
                            @_notificationTestMessage
                        </div>
                    }
                    
                    <div class="small text-muted mt-3">
                        <p>Last notification scheduled: @Preferences.Get("last_notification_scheduled", "Never")</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool _isTestingNotification;
    private string _notificationTestMessage = string.Empty;
    private bool _notificationTestError;
    
    private async Task SendTestNotification()
    {
        try
        {
            _isTestingNotification = true;
            _notificationTestMessage = string.Empty;
            
            await NotificationService.SendTestNotificationAsync();
            
            _notificationTestMessage = $"Test notification sent successfully at {DateTime.Now:HH:mm:ss}";
            _notificationTestError = false;
        }
        catch (Exception ex)
        {
            _notificationTestMessage = $"Error sending test notification: {ex.Message}";
            _notificationTestError = true;
        }
        finally
        {
            _isTestingNotification = false;
        }
    }
}
