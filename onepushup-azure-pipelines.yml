# Manual-only, per-app pipeline
trigger: none
pr: none

pool:
  vmImage: 'macOS-latest'

# ---------- REQUIRED runtime parameters ----------
parameters:
- name: displayVersion
  type: string
- name: track
  type: string
  values: [internal, alpha, beta, production]
- name: notesDir
  type: string
  default: ''

# ---------- Variables ----------
variables:
- group: maui-android

# App-specific constants
- name: ApplicationId
  value: com.softwarecowboys.onepushup
- name: MauiProject
  value: OneActivity.App.Pushups/OneActivity.App.Pushups.csproj
- name: KeystoreSecureFileName
  value: myapp.keystore
- name: BuildConfiguration
  value: Release
- name: TargetFramework
  value: net9.0-android
# Seed should be (last Play versionCode + 1)
- name: VersionCode
  value: $[counter('android-onepushup', 2)]

stages:
- stage: Build
  displayName: Build AAB
  jobs:
  # --- Validate run-time parameters ---
  - job: ValidateInputs
    displayName: Validate required parameters
    steps:
      - bash: |
          echo "Validating parameters..."
          DV='${{ parameters.displayVersion }}'
          TRACK='${{ parameters.track }}'
          if [ -z "$DV" ]; then
            echo "##vso[task.logissue type=error]Parameter 'displayVersion' is required."
            exit 1
          fi
          if ! echo "$DV" | grep -Eq '^[0-9]+(\.[0-9]+){1,2}([+-][0-9A-Za-z.-]+)?$'; then
            echo "##vso[task.logissue type=error]displayVersion '$DV' must look like 1.2 or 1.2.3 or 1.2.3-beta."
            exit 1
          fi
          if [ -z "$TRACK" ]; then
            echo "##vso[task.logissue type=error]Parameter 'track' is required."
            exit 1
          fi
          echo "OK."
        displayName: 'Fail early if params missing/invalid'

  # --- Validate the keystore file + store password + alias ---
  - job: ValidateKeystore
    dependsOn: ValidateInputs
    displayName: Validate keystore & alias
    steps:
      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      - bash: |
          set -euo pipefail
          echo "Keystore path: $(keystore.secureFilePath)"
          ls -l "$(keystore.secureFilePath)"

          echo "Checking STORE password..."
          if ! keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$ANDROID_STORE_PASS" > /dev/null 2>&1; then
            echo "##vso[task.logissue type=error]Keystore store password is incorrect (ANDROID_STORE_PASS)."
            exit 1
          fi
          echo "Store password OK."

          echo "Collecting aliases (verbose format)..."
          ALIASES=$(keytool -list -v -keystore "$(keystore.secureFilePath)" -storepass "$ANDROID_STORE_PASS" 2>/dev/null | awk -F': ' '/^Alias name: /{print $2}')
          if [ -z "$ALIASES" ]; then
            echo "Fallback to compact format..."
            ALIASES=$(keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$ANDROID_STORE_PASS" 2>/dev/null | sed -n 's/^[[:space:]]*\([^,][^,]*\),.*/\1/p')
          fi

          echo "Found aliases: $ALIASES"
          MATCH=0
          for A in $ALIASES; do [ "$A" = "$ANDROID_KEY_ALIAS" ] && MATCH=1; done
          if [ $MATCH -ne 1 ]; then
            echo "##vso[task.logissue type=error]Alias '$ANDROID_KEY_ALIAS' not found in keystore."
            exit 1
          fi
          echo "Alias exists."
        displayName: 'Validate keystore + alias'
        env:
          ANDROID_STORE_PASS: $(ANDROID_STORE_PASS)
          ANDROID_KEY_ALIAS:  $(ANDROID_KEY_ALIAS)

  # --- Validate key password for the alias ---
  - job: ValidateKeyPassword
    dependsOn: ValidateKeystore
    displayName: Validate key password (alias)
    steps:
      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      - bash: |
          set -euo pipefail
          echo "Checking KEY password for alias '$ANDROID_KEY_ALIAS'..."
          if ! keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$ANDROID_STORE_PASS" -alias "$ANDROID_KEY_ALIAS" -keypass "$ANDROID_KEY_PASS" > /dev/null 2>&1; then
            echo "##vso[task.logissue type=error]Key password is incorrect (ANDROID_KEY_PASS) for alias '$ANDROID_KEY_ALIAS'."
            exit 1
          fi
          echo "Key password OK."
        displayName: 'Validate key password'
        env:
          ANDROID_STORE_PASS: $(ANDROID_STORE_PASS)
          ANDROID_KEY_PASS:  $(ANDROID_KEY_PASS)
          ANDROID_KEY_ALIAS: $(ANDROID_KEY_ALIAS)

  # --- Build, sign & publish artifact ---
  - job: BuildAndroid
    dependsOn: ValidateKeyPassword
    displayName: Build Android (signed)
    steps:
      - checkout: self
        clean: true

      - task: UseDotNet@2
        displayName: 'Use .NET 9 SDK'
        inputs:
          packageType: sdk
          version: 9.x

      - bash: dotnet workload restore
        displayName: 'Restore .NET workloads (project)'

      - bash: dotnet restore $(MauiProject)
        displayName: 'Restore'

      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      # Publish to a fixed staging directory
      - bash: |
          set -euo pipefail
          OUT_DIR="$(Build.ArtifactStagingDirectory)/android"
          mkdir -p "$OUT_DIR"
          echo "Publishing to $OUT_DIR"
          dotnet publish $(MauiProject) \
            -c $(BuildConfiguration) -f $(TargetFramework) \
            /p:AndroidPackageFormat=aab \
            /p:ApplicationVersion=$(VersionCode) \
            /p:ApplicationDisplayVersion=${{ parameters.displayVersion }} \
            /p:PackageOutputPath="$OUT_DIR"
          echo "Contents of $OUT_DIR:"
          ls -l "$OUT_DIR"
        displayName: 'Publish AAB'

      # Find the AAB only in the staging dir
      - bash: |
          set -euo pipefail
          OUT_DIR="$(Build.ArtifactStagingDirectory)/android"
          AAB=$(find "$OUT_DIR" -maxdepth 1 -type f -name "*.aab" -print -quit)
          if [ -z "$AAB" ]; then
            echo "##vso[task.logissue type=error]No .aab in $OUT_DIR (did publish succeed?)."
            exit 1
          fi
          echo "##vso[task.setvariable variable=AAB_PATH;isOutput=true]$AAB"
          echo "Found AAB: $AAB"
        name: findaab
        displayName: 'Find AAB (staging dir)'

      # Explicitly sign with jarsigner (deterministic)
      - bash: |
          set -euo pipefail
          echo "Signing bundle with jarsigner..."
          /usr/bin/jarsigner -verbose \
            -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore "$(keystore.secureFilePath)" \
            -storepass "$ANDROID_STORE_PASS" \
            -keypass "$ANDROID_KEY_PASS" \
            "$(findaab.AAB_PATH)" "$ANDROID_KEY_ALIAS"
          echo "Signed OK."
        displayName: 'Sign AAB with jarsigner'
        env:
          ANDROID_STORE_PASS: $(ANDROID_STORE_PASS)
          ANDROID_KEY_PASS:  $(ANDROID_KEY_PASS)
          ANDROID_KEY_ALIAS: $(ANDROID_KEY_ALIAS)

      # Verify signature
      - bash: |
          set -euo pipefail
          echo "Verifying signature..."
          /usr/bin/jarsigner -verify -verbose -certs "$(findaab.AAB_PATH)"
          echo "Verification OK."
        displayName: 'Verify AAB signature'

      # Publish the whole staging dir as the artifact
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/android'
          ArtifactName: 'aab'
          publishLocation: 'Container'

- stage: Release
  displayName: Release to Google Play
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: PushToPlay
    steps:
      - download: current
        artifact: aab

      - task: GooglePlayRelease@4
        displayName: 'Upload to Google Play (${{ parameters.track }})'
        inputs:
          serviceConnection: 'googleplay-connection'
          action: 'SingleBundle'
          applicationId: '$(ApplicationId)'
          bundleFile: '$(Pipeline.Workspace)/aab/*.aab'
          track: '${{ parameters.track }}'
          userFraction: '0.1'
          whatsNewDirectory: '${{ parameters.notesDir }}'