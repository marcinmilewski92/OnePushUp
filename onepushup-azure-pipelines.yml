# Manual-only, per-app build pipeline (no release)
trigger: none
pr: none

pool:
  vmImage: 'macOS-latest'

# ---------- REQUIRED runtime parameters ----------
parameters:
- name: displayVersion
  type: string

# ---------- Variables ----------
# Variable Group must contain:
# ANDROID_KEY_ALIAS, ANDROID_STORE_PASS, ANDROID_KEY_PASS, EXPECTED_UPLOAD_CERT_SHA1
variables:
- group: maui-android

# App-specific constants
- name: ApplicationId
  value: com.softwarecowboys.onepushup
- name: MauiProject
  value: OneActivity.App.Pushups/OneActivity.App.Pushups.csproj
- name: KeystoreSecureFileName
  value: myapp.keystore
- name: BuildConfiguration
  value: Release
- name: TargetFramework
  value: net9.0-android
# Seed should be (last Play versionCode + 1) — adjust if you need to resync
- name: VersionCode
  value: $[counter('android-onepushup', 2)]

stages:
# ===========================
# Stage: Build
# ===========================
- stage: Build
  displayName: Build AAB
  jobs:
  # --- Validate run-time parameters ---
  - job: ValidateInputs
    displayName: Validate required parameters
    steps:
      - bash: |
          echo "Validating parameters..."
          DV='${{ parameters.displayVersion }}'
          if [ -z "$DV" ]; then
            echo "##vso[task.logissue type=error]Parameter 'displayVersion' is required."
            exit 1
          fi
          if ! echo "$DV" | grep -Eq '^[0-9]+(\.[0-9]+){1,2}([+-][0-9A-Za-z.-]+)?$'; then
            echo "##vso[task.logissue type=error]displayVersion '$DV' must look like 1.2 or 1.2.3 or 1.2.3-beta."
            exit 1
          fi
          echo "OK."
        displayName: 'Fail early if params missing/invalid'

  # --- Validate the keystore file + store password + alias ---
  - job: ValidateKeystore
    dependsOn: ValidateInputs
    displayName: Validate keystore, alias & passwords
    steps:
      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      - bash: |
          set -euo pipefail
          echo "Keystore path: $(keystore.secureFilePath)"
          ls -l "$(keystore.secureFilePath)"

          echo "Checking STORE password..."
          if ! keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$ANDROID_STORE_PASS" > /dev/null 2>&1; then
            echo "##vso[task.logissue type=error]Keystore store password is incorrect (ANDROID_STORE_PASS)."
            exit 1
          fi
          echo "Store password OK."

          echo "Checking alias + KEY password..."
          if ! keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$ANDROID_STORE_PASS" -alias "$ANDROID_KEY_ALIAS" -keypass "$ANDROID_KEY_PASS" > /dev/null 2>&1; then
            echo "##vso[task.logissue type=error]Alias not found or key password incorrect (ANDROID_KEY_ALIAS / ANDROID_KEY_PASS)."
            exit 1
          fi
          echo "Alias and key password OK."
        displayName: 'Validate keystore + alias + key'
        env:
          ANDROID_STORE_PASS: $(ANDROID_STORE_PASS)
          ANDROID_KEY_PASS:  $(ANDROID_KEY_PASS)
          ANDROID_KEY_ALIAS: $(ANDROID_KEY_ALIAS)

      # Guard: Keystore fingerprint must match Play Console (Upload certificate)
      - bash: |
          set -euo pipefail
          EXPECT="$EXPECTED_UPLOAD_CERT_SHA1"
          if [ -z "$EXPECT" ]; then
            echo "##vso[task.logissue type=error]EXPECTED_UPLOAD_CERT_SHA1 is not set. Add it as a secret (Upload certificate SHA-1 from Play Console)."
            exit 1
          fi

          FPR=$(keytool -list -v \
                -keystore "$(keystore.secureFilePath)" \
                -alias "$ANDROID_KEY_ALIAS" \
                -storepass "$ANDROID_STORE_PASS" -keypass "$ANDROID_KEY_PASS" \
                | awk -F': ' '/SHA1:/{print $2; exit}')
          echo "Keystore alias SHA1: $FPR"

          if [ "$FPR" != "$EXPECT" ]; then
            echo "##vso[task.logissue type=error]Wrong signing key. Expected: $EXPECT, Found: $FPR"
            exit 1
          fi
          echo "Keystore matches Play’s Upload certificate."
        displayName: 'Validate upload key fingerprint (keystore)'
        env:
          ANDROID_STORE_PASS: $(ANDROID_STORE_PASS)
          ANDROID_KEY_PASS:  $(ANDROID_KEY_PASS)
          ANDROID_KEY_ALIAS: $(ANDROID_KEY_ALIAS)
          EXPECTED_UPLOAD_CERT_SHA1: $(EXPECTED_UPLOAD_CERT_SHA1)

  # --- Build (MSBuild signing), verify & publish artifact ---
  - job: BuildAndroid
    dependsOn: ValidateKeystore
    displayName: Build Android (MSBuild-signed) & publish artifact
    steps:
      - checkout: self
        clean: true

      - task: UseDotNet@2
        displayName: 'Use .NET 9 SDK'
        inputs:
          packageType: sdk
          version: 9.x

      # Install required workloads explicitly (reliable on macOS images)
      - bash: |
          set -e
          dotnet workload update || true
          dotnet workload install android ios maccatalyst maui
          dotnet workload list
        displayName: 'Install MAUI workloads (android/ios/maccatalyst/maui)'

      - bash: dotnet restore $(MauiProject)
        displayName: 'NuGet restore (MAUI project only)'

      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      # Publish to fixed staging directory with MSBuild signing (same as your local command)
      - bash: |
          set -euo pipefail
          OUT_DIR="$(Build.ArtifactStagingDirectory)/android"
          mkdir -p "$OUT_DIR"
          echo "Publishing (MSBuild signing) to $OUT_DIR"
          dotnet publish $(MauiProject) \
            -c $(BuildConfiguration) -f $(TargetFramework) \
            -o "$OUT_DIR" \
            /p:ApplicationVersion=$(VersionCode) \
            /p:ApplicationDisplayVersion=${{ parameters.displayVersion }} \
            /p:AndroidKeyStore=true \
            /p:AndroidSigningKeyStore="$(keystore.secureFilePath)" \
            /p:AndroidSigningStorePass="$ANDROID_STORE_PASS" \
            /p:AndroidSigningKeyAlias="$ANDROID_KEY_ALIAS" \
            /p:AndroidSigningKeyPass="$ANDROID_KEY_PASS" \
            /p:AndroidPackageFormats=aab \
            /bl:$(Build.SourcesDirectory)/maui.publish.binlog

          echo "Contents of $OUT_DIR:"
          ls -la "$OUT_DIR"
        displayName: 'Publish AAB (MSBuild-signed, with binlog)'
        env:
          ANDROID_STORE_PASS: $(ANDROID_STORE_PASS)
          ANDROID_KEY_PASS:  $(ANDROID_KEY_PASS)
          ANDROID_KEY_ALIAS: $(ANDROID_KEY_ALIAS)

      # Find AAB and stage to a deterministic upload filename
      - bash: |
          set -euo pipefail
          OUT_DIR="$(Build.ArtifactStagingDirectory)/android"
          echo "Looking for .aab in $OUT_DIR"
          AAB=$(find "$OUT_DIR" -maxdepth 2 -type f -name "*.aab" -print -quit || true)

          if [ -z "$AAB" ]; then
            echo "No .aab in $OUT_DIR. Showing OUT_DIR files:"
            find "$OUT_DIR" -maxdepth 2 -type f -print || true

            echo "Falling back to bin path search (excluding obj):"
            AAB=$(find "$(System.DefaultWorkingDirectory)" -type f -name "*.aab" -path "*/bin/*" ! -path "*/obj/*" -print -quit || true)
          fi

          if [ -z "$AAB" ]; then
            echo "##vso[task.logissue type=error]No .aab produced. See binlog artifact."
            exit 1
          fi

          UPLOAD_DIR="$(Build.ArtifactStagingDirectory)/upload"
          mkdir -p "$UPLOAD_DIR"
          DEST="$UPLOAD_DIR/$(ApplicationId).aab"
          cp -f "$AAB" "$DEST"

          echo "##vso[task.setvariable variable=UPLOAD_AAB;isOutput=true]$DEST"
          echo "Prepared upload bundle at: $DEST"
        name: prepupload
        displayName: 'Stage signed AAB'

      # Guard: AAB must be signed with expected upload key (compare SHA-1 from inside AAB)
      - bash: |
          set -euo pipefail
          echo "Verifying signature..."
          jarsigner -verify -verbose -certs "$(prepupload.UPLOAD_AAB)" > /tmp/jv.txt || {
            echo "##vso[task.logissue type=error]jarsigner verification failed."
            cat /tmp/jv.txt || true
            exit 1
          }
          cat /tmp/jv.txt | awk '/SHA1/{print}'
          AAB_SHA1=$(awk -F': ' '/SHA1:/{print $2; exit}' /tmp/jv.txt)
          echo "AAB signature SHA1: $AAB_SHA1"

          if [ -z "$EXPECTED_UPLOAD_CERT_SHA1" ]; then
            echo "##vso[task.logissue type=error]EXPECTED_UPLOAD_CERT_SHA1 is not set."
            exit 1
          fi
          if [ "$AAB_SHA1" != "$EXPECTED_UPLOAD_CERT_SHA1" ]; then
            echo "##vso[task.logissue type=error]AAB not signed with expected upload key. Expected: $EXPECTED_UPLOAD_CERT_SHA1, Found: $AAB_SHA1"
            exit 1
          fi
          echo "AAB signature matches expected upload key."
        displayName: 'Verify AAB is signed with expected key'
        env:
          EXPECTED_UPLOAD_CERT_SHA1: $(EXPECTED_UPLOAD_CERT_SHA1)

      # Publish artifacts (AAB + binlog)
      - task: PublishBuildArtifacts@1
        displayName: 'Publish AAB artifact'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)/upload'
          ArtifactName: 'aab'
          publishLocation: 'Container'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish binlog (always)'
        condition: always()
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/maui.publish.binlog'
          ArtifactName: 'logs'
          publishLocation: 'Container'