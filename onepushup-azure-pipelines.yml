# Manual-only, per-app pipeline
trigger: none
pr: none

pool:
  vmImage: 'macOS-latest'

# ---------- REQUIRED runtime parameters ----------
parameters:
- name: displayVersion          # e.g. 1.4.2 (REQUIRED at run)
  type: string
- name: track                   # (REQUIRED at run)
  type: string
  values: [internal, alpha, beta, production]
- name: notesDir                # optional (can be empty)
  type: string
  default: ''

# ---------- Variables ----------
variables:
# Variable Group must contain: ANDROID_KEY_ALIAS, ANDROID_STORE_PASS, ANDROID_KEY_PASS
- group: maui-android

# App-specific constants
- name: ApplicationId
  value: com.softwarecowboys.onepushup
- name: MauiProject
  value: OneActivity.App.Pushups/OneActivity.App.Pushups.csproj
- name: KeystoreSecureFileName
  value: myapp.keystore
- name: BuildConfiguration
  value: Release
- name: TargetFramework
  value: net9.0-android
# Seed should be (last Play versionCode + 1)
- name: VersionCode
  value: $[counter('android-onepushup', 3)]

stages:
- stage: Build
  displayName: Build AAB
  jobs:
  # --- Validate run-time parameters ---
  - job: ValidateInputs
    displayName: Validate required parameters
    steps:
      - script: |
          echo "Validating parameters..."
          DV='${{ parameters.displayVersion }}'
          TRACK='${{ parameters.track }}'
          if [ -z "$DV" ]; then
            echo "##vso[task.logissue type=error]Parameter 'displayVersion' is required."
            exit 1
          fi
          if ! echo "$DV" | grep -Eq '^[0-9]+(\.[0-9]+){1,2}([+-][0-9A-Za-z.-]+)?$'; then
            echo "##vso[task.logissue type=error]displayVersion '$DV' must look like 1.2 or 1.2.3 or 1.2.3-beta."
            exit 1
          fi
          if [ -z "$TRACK" ]; then
            echo "##vso[task.logissue type=error]Parameter 'track' is required."
            exit 1
          fi
          echo "OK."
        displayName: 'Fail early if params missing/invalid'

  # --- Validate the keystore file + store password + alias ---
  - job: ValidateKeystore
    displayName: Validate keystore & alias
    steps:
      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      - script: |
          set -euo pipefail
          echo "Keystore path: $(keystore.secureFilePath)"
          ls -l "$(keystore.secureFilePath)"

          echo "Checking STORE password..."
          if ! keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$(ANDROID_STORE_PASS)" > /dev/null 2>&1; then
            echo "##vso[task.logissue type=error]Keystore store password is incorrect (ANDROID_STORE_PASS)."
            exit 1
          fi
          echo "Store password OK."

          echo "Listing aliases..."
          keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$(ANDROID_STORE_PASS)"

          echo "Verifying alias presence..."
          if ! keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$(ANDROID_STORE_PASS)" | grep -q "Alias name: $(ANDROID_KEY_ALIAS)"; then
            echo "##vso[task.logissue type=error]Alias '$(ANDROID_KEY_ALIAS)' not found in keystore. Update ANDROID_KEY_ALIAS or the keystore."
            exit 1
          fi
          echo "Alias exists."
        displayName: 'Validate keystore + alias'

  # --- Validate key password for the alias ---
  - job: ValidateKeyPassword
    dependsOn: ValidateKeystore
    displayName: Validate key password (alias)
    steps:
      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      - script: |
          set -euo pipefail
          echo "Checking KEY password for alias '$(ANDROID_KEY_ALIAS)'..."
          if ! keytool -list -keystore "$(keystore.secureFilePath)" -storepass "$(ANDROID_STORE_PASS)" -alias "$(ANDROID_KEY_ALIAS)" -keypass "$(ANDROID_KEY_PASS)" > /dev/null 2>&1; then
            echo "##vso[task.logissue type=error]Key password is incorrect (ANDROID_KEY_PASS) for alias '$(ANDROID_KEY_ALIAS)'."
            exit 1
          fi
          echo "Key password OK."
        displayName: 'Validate key password'

  # --- Build & sign ---
  - job: BuildAndroid
    dependsOn: ValidateKeyPassword
    displayName: Build Android (signed)
    steps:
      - checkout: self
        clean: true

      - task: UseDotNet@2
        displayName: 'Use .NET 9 SDK'
        inputs:
          packageType: sdk
          version: 9.x

      - script: dotnet workload install maui
        displayName: 'Install .NET MAUI workload'

      - script: yes | sdkmanager --licenses
        displayName: 'Accept Android SDK licenses'
        continueOnError: true

      - script: dotnet restore $(MauiProject)
        displayName: 'Restore'

      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: $(KeystoreSecureFileName)

      - script: |
          echo "Building $(ApplicationId)"
          echo "versionCode=$(VersionCode) displayVersion=${{ parameters.displayVersion }}"
          dotnet publish $(MauiProject) -c $(BuildConfiguration) -f $(TargetFramework) /p:AndroidPackageFormat=aab /p:ApplicationVersion=$(VersionCode) /p:ApplicationDisplayVersion=${{ parameters.displayVersion }} /p:AndroidKeyStore=true /p:AndroidSigningKeyStore=$(keystore.secureFilePath) /p:AndroidSigningKeyAlias=$(ANDROID_KEY_ALIAS) /p:AndroidSigningStorePass=$(ANDROID_STORE_PASS) /p:AndroidSigningKeyPass=$(ANDROID_KEY_PASS)
        displayName: 'Publish AAB (signed)'

      - script: |
          AAB=$(find $(System.DefaultWorkingDirectory) -name "*.aab" | head -n 1)
          if [ -z "$AAB" ]; then
            echo "##vso[task.logissue type=error]No .aab produced."
            exit 1
          fi
          echo "##vso[task.setvariable variable=AAB_PATH;isOutput=true]$AAB"
          echo "Found AAB: $AAB"
        name: findaab
        displayName: 'Find AAB'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(findaab.AAB_PATH)'
          ArtifactName: 'aab'
          publishLocation: 'Container'

- stage: Release
  displayName: Release to Google Play
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: PushToPlay
    steps:
      - download: current
        artifact: aab

      - task: GooglePlayRelease@4
        displayName: 'Upload to Google Play (${{ parameters.track }})'
        inputs:
          serviceConnection: 'googleplay-connection'
          action: 'SingleBundle'
          applicationId: '$(ApplicationId)'
          bundleFile: '$(Pipeline.Workspace)/aab/*.aab'
          track: '${{ parameters.track }}'
          userFraction: '0.1'
          whatsNewDirectory: '${{ parameters.notesDir }}'